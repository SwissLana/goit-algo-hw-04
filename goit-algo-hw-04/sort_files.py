import argparse # –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
import shutil # –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
import sys  # –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–º–∏–ª–æ–∫ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
import shlex # –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–æ–∑–±–∏—Ç—Ç—è —Ä—è–¥–∫–∞ –∑ —à–ª—è—Ö–∞–º–∏
from pathlib import Path # –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–≤–∏–º–∏ —à–ª—è—Ö–∞–º–∏
from collections import defaultdict # –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏

# ANSI –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
COLOR_BLUE = "\033[94m"   # –¥–ª—è —Ç–µ–∫ —É –¥–µ—Ä–µ–≤—ñ —Ç–∞ —á–∏—Å–µ–ª —É –ø—ñ–¥—Å—É–º–∫—É
COLOR_GREEN = "\033[92m"  # –¥–ª—è –ø–æ–∑–Ω–∞—á–∫–∏ "–ì–æ—Ç–æ–≤–æ" —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É 
COLOR_RESET = "\033[0m"   # —Å–∫–∏–¥–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ 

# –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞
def display_tree(path: Path, indent: str = "", prefix: str = "") -> None:
    if path.is_dir():
        # –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–µ–∫–∏ —Å–∏–Ω—ñ–º –∫–æ–ª—å–æ—Ä–æ–º
        print(indent + prefix + COLOR_BLUE + path.name + COLOR_RESET)
        indent += "    " if prefix else ""
        # —Å–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É —Ç–µ–∫–∏, –ø–æ—Ç—ñ–º —Ñ–∞–π–ª–∏, –æ–±–∏–¥–≤–∞ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É
        children = [c for c in path.iterdir() if not c.name.startswith(".DS_Store")]
        children = sorted(children, key=lambda x: (x.is_file(), x.name.lower()))
        for index, child in enumerate(children):
            is_last = index == len(children) - 1
            display_tree(child, indent, "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ ")
    else:
        if not path.name.startswith(".DS_Store"):
            print(indent + prefix + path.name)

# –ü–∞—Ä—Å–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ 
def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª–∏ –∑—ñ source –≤ dest —ñ —Å–æ—Ä—Ç—É—î —ó—Ö –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏."
    )
    parser.add_argument("source", type=Path, nargs="?", help="–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
    parser.add_argument(
        "dest", type=Path, nargs="?", default=Path("dist"),
        help="–®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: ./dist)"
    )
    return parser.parse_args()

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è child –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ parent —É —Ñ–∞–π–ª–æ–≤—ñ–π —Å–∏—Å—Ç–µ–º—ñ 
def is_within(child: Path, parent: Path) -> bool:
    try:
        child.resolve().relative_to(parent.resolve())
        return True
    except Exception:
        return False

# –ö–æ–ø—ñ—é—î —Ñ–∞–π–ª —É —Ç–µ–∫—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º —É dest_root 
def copy_file_to_ext_dir(file_path: Path, dest_root: Path) -> None:
    if file_path.name.startswith(".DS_Store"):
        return False
    # –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è (–±–µ–∑ –∫—Ä–∞–ø–∫–∏, —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ); —è–∫—â–æ –Ω–µ–º–∞—î ‚Äî "no_ext" 
    ext = file_path.suffix.lower().lstrip(".") or "no_ext"
    target_dir = dest_root / ext
    try:
        target_dir.mkdir(parents=True, exist_ok=True)
    except PermissionError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫–∏: {target_dir} ‚Äî {e}", file=sys.stderr)
        return
    except OSError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫–∏: {target_dir} ‚Äî {e}", file=sys.stderr)
        return

    target_path = target_dir / file_path.name # —Ü—ñ–ª—å–æ–≤–∏–π —à–ª—è—Ö –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
    
    if target_path.exists():
        return False  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —Ñ–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î
    
    try:
        shutil.copy2(file_path, target_path)
        
    except PermissionError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {file_path} ‚Äî {e}", file=sys.stderr)
    except FileNotFoundError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥ —á–∞—Å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {file_path} ‚Äî {e}", file=sys.stderr)
    except OSError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è {file_path} -> {target_path} ‚Äî {e}", file=sys.stderr)

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç—å source —ñ –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª–∏ —É dest_root 
def walk_and_copy(source: Path, dest_root: Path) -> None:
    try:
        entries = list(source.iterdir())
    except PermissionError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è: {source} ‚Äî {e}", file=sys.stderr)
        return
    except FileNotFoundError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –¢–µ–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {source} ‚Äî {e}", file=sys.stderr)
        return
    except OSError as e:
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫–∏ {source} ‚Äî {e}", file=sys.stderr)
        return

    for entry in entries: # —ñ—Ç–µ—Ä—É—î–º–æ—Å—è –ø–æ –≤–º—ñ—Å—Ç—É —Ç–µ–∫–∏ source 
        if entry.is_dir():
            # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≥—ñ–ª–∫—É, —è–∫—â–æ dest –ª–µ–∂–∏—Ç—å —É —Ü—ñ–π –ø—ñ–¥—Ç–µ—Ü—ñ
            if is_within(dest_root, entry):
                continue
            walk_and_copy(entry, dest_root)
        elif entry.is_file():
            if entry.name.startswith(".DS_Store"):
                continue
            copy_file_to_ext_dir(entry, dest_root)
            
# –ó–±–∏—Ä–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ —É dest
def collect_stats(dest: Path) -> dict[str, int]:
    stats: dict[str, int] = defaultdict(int)
    if not dest.exists():
        return stats
    for ext_dir in dest.iterdir():
        if ext_dir.is_dir():
            ext = ext_dir.name
            files = [f for f in ext_dir.iterdir() if f.is_file() and not f.name.startswith(".DS_Store")]
            stats[ext] += len(files)
    return stats

# –í–∏–≤–æ–¥–∏—Ç—å –ø—ñ–¥—Å—É–º–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ 
def print_summary(stats: dict[str, int]) -> None:
    total = sum(stats.values())
    print(f"\n   {COLOR_GREEN}–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:{COLOR_RESET}\n")
    if not stats:
        print("  –£ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤.")
    else:
        for ext, count in sorted(stats.items()):
            print(f"  {ext:<10} {COLOR_BLUE}{count:>5}{COLOR_RESET} —Ñ–∞–π–ª(–∏)")
        print("  " + "-"*24)
        print(f"  {COLOR_GREEN}TOTAL{COLOR_RESET}       {COLOR_BLUE}{total:>5}{COLOR_RESET} {COLOR_GREEN}—Ñ–∞–π–ª(–∏){COLOR_RESET}")
    

def main() -> int:
    args = parse_args()

    # —è–∫—â–æ source –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –∑–∞–ø–∏—Ç—É—î–º–æ —à–ª—è—Ö–∏ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º
    if args.source is None:
        line = input(
            "–í–≤–µ–¥—ñ—Ç—å —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó —Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è "
            "(—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ‚Äî —Ñ–∞–π–ª–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —É 'dist'):\n> "
        ).strip()

        parts = shlex.split(line)  # –∫–æ—Ä–µ–∫—Ç–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ª–∞–ø–æ–∫/–ø—Ä–æ–±—ñ–ª—ñ–≤ —É —à–ª—è—Ö–∞—Ö
        if not parts:
            print("[–ü–û–ú–ò–õ–ö–ê] –ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.", file=sys.stderr)
            return 2

        src = Path(parts[0]).expanduser()  # –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî source
        dst = Path(parts[1]).expanduser() if len(parts) > 1 else Path("dist") # –¥—Ä—É–≥–∏–π ‚Äî dest –∞–±–æ 'dist' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    else:
        # —è–∫—â–æ source –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ
        src = args.source
        # —è–∫—â–æ dest –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ; —è–∫—â–æ –Ω—ñ ‚Äî 'dist' –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        dst = args.dest or Path("dist")
    
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —à–ª—è—Ö—ñ–≤ 
    if not src.exists():
        print(f"[–ü–û–ú–ò–õ–ö–ê] –í–∏—Ö—ñ–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î: {src}", file=sys.stderr)
        return 2
    if not src.is_dir():
        print(f"[–ü–û–ú–ò–õ–ö–ê] –®–ª—è—Ö –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é: {src}", file=sys.stderr)
        return 2

    try:
        dst.mkdir(parents=True, exist_ok=True)
    except PermissionError as e:
        print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {dst} ‚Äî {e}", file=sys.stderr)
        return 2
    except OSError as e:
        print(f"[–ü–û–ú–ò–õ–ö–ê] –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {dst} ‚Äî {e}", file=sys.stderr)
        return 2

    # —è–∫—â–æ dest –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ source ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ
    if is_within(dst, src):
        print(f"[–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø] –¢–µ–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {dst} –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–æ—ó {src}.", file=sys.stderr)
        print("  –§–∞–π–ª–∏ –≤ —Ç–µ—Ü—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è.", file=sys.stderr)

    walk_and_copy(src, dst)
    # –ø–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    print(f"\n{COLOR_GREEN}[–ì–æ—Ç–æ–≤–æ]{COLOR_RESET} –§–∞–π–ª–∏ –∑ '{src}' —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω—ñ –≤ '{dst}' —ñ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º.")
    print(f"\nüìÇ {COLOR_GREEN}–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:{COLOR_RESET}\n")
    display_tree(dst)
    
    # –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏ 
    final_stats = collect_stats(dst)
    print_summary(final_stats)
    return 0
    

if __name__ == "__main__":
    raise SystemExit(main())